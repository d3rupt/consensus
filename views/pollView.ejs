<!DOCTYPE html>
<html>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
<script src="https://kit.fontawesome.com/6cc08cc3c7.js" crossorigin="anonymous"></script>
<style>
  * {
    font-family: "Roboto";
  }
  .container {
    display: flex;
  }
  body {
    background-size: 500%;
    margin: 0;
    padding: 0;
  }
  /*General*/
  * {
    font-family: "Roboto";
    box-sizing: border-box;
  }
  .container {
    display: flex;
  }
  ::placeholder {
    font-size: 90%;
  }

  input {
    background: rgba(0,0,0,0.025);
    outline: none;
    width: 80%;
    border-top-style: hidden;
    /*border-left: 1px solid rgb(57, 113, 250);*/
    border-left-style: hidden;
    border-bottom: 1px solid rgb(57, 113, 250);
    border-right-style: hidden;
    border-radius: 1px;
    transition: all 0.25s;
  }
  input:focus {
    background: white;
  }
  /*Top*/
  .loader {
    z-index: 10000;
    position: absolute;
    height: 100%;
    width: 100%;
    background: white;
    opacity: 1;
    transition: opacity 1s;
  }
  .loaded {
    opacity: 0;
  }
  .topWrapper {
    flex-direction: column;
    height: 20vh;
  }
  .topRow {
    background: #333;
    height: 7.5vh;
    width: 100%;
  }
  .topRow div {
    text-align: center;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 75%;
  }
  #title {
    justify-content: space-around;
    padding: 0 2.5%;
    width: 50%;
  }
  .logo {
    color: rgba(255,255,255,0.75);
    background: linear-gradient( rgb(255, 63, 0), red);
    border: 5px solid rgba(255.255.255.0.5);
    width: 5vh;
    height: 5vh;
    border-radius: 40%;
    align-items: center;
    justify-content: center;
    margin: 1%;
  }
  #search {
    width: 20%;
  }
  #nav {
    border-left: 1px solid rgb(255, 99, 0);
    border-right: 1px solid rgb(255, 99, 0);
    color: white;
    width: 40%;
  }
  #pollCreateTop, #pollListTop {
    align-items: center;
    justify-content: center;
    width: 50%;
    font-size: 1em;
    background: #333;
    cursor: pointer;
  }

  #pollListTop {
    height: 100%;
  background: rgb(255, 63, 0);
  }
  .pollWrapper {
    align-items: center;
    justify-content: center;
  }
  .pollView {
    flex-direction: column;
    align-items: center;
    justify-content: space-around;
    background: white;
    width: 80%;
    height: 60vh;
  }
  #pollViewTitle1 {
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 15vh;
    font-size: 1.5em;
  }
  #pollViewTitle {
    height: auto;
  }
  .pollViewDescription {
    font-size: 0.75em;
    width: 100%;
    align-items: center;
    justify-content: center;
  }
  .pollViewOptions {
    width: 100%;
    align-items: center;
    justify-content: center;
  }
  .optionContainer {
    flex-direction: column;
  }
  .option, .counter {
    text-align: center;

  }
  .counter {
    border: 2px solid #333;
    color: white;
    background: grey;
  }
  .highest {
    background: green;
    box-shadow: 0 0 5px green;
  }
</style>
<body style=" background-image: url('/embossedbackground22.png');
">
  <div class="container topWrapper">
    <div class="container topRow">
      <div class="container topRowItem" id="title">
        <div class="container logo">
          <i class="container fas fa-poll fa-lg"></i>

        </div>
        <h1>Consensus</h1>
      </div>
      <div class="container topRowItem" id="search">
        <i class="fas fa-search"></i>
      </div>
      <div class="container topRowItem" id="nav" >
        <div class="container" id="pollCreateTop" onclick="window.location.href='/'">
          <p>
            Create
          </p>
        </div>

        <div class="container" id="pollListTop">
          <p>
            All
          </p>
        </div>
      </div>
      <div class="container topRowItem" id="singIn">

      </div>

    </div>
  </div>
  <div class="container pollWrapper">
    <div class="container pollView">
      <div class="container pollViewTitle" id="pollViewTitle1">
        <p id="pollViewTitle">
          <%= title %>
        </p>
      </div>
      <div class="container pollViewDescription">
        <p id="pollViewDescription">
          <%= description %>
        </p>
      </div>
      <div class="container pollViewOptions">
        <div id="pollViewOptions">
          <% options.forEach(o => { %>
            <div class="container optionContainer">
              <div class="option">
                <%= o %>
              </div>
              <div class="counter">
                <%= votes[options.indexOf(o)] %>
              </div>
            </div>
            <% }) %>
        </div>
      </div>
      <div class="container pollViewAdd">
        <input type="text" id="pollViewAdd" />
        <button id="pollAdd">+</button>
      </div>
    </div>
  </div>
</body>

<script>
let xhttp = new XMLHttpRequest;
let title = document.getElementById('pollViewTitle');
let description = document.getElementById('pollViewDescription');
let options = document.getElementById('pollViewOptions');
let addOption = document.getElementById('pollAdd');

window.onload = getPoll();

function getPoll() {
  let pollResp;
  options = document.getElementById('pollViewOptions');
  /*  xhttp.onreadystatechange = (e) => {
      if (xhttp.readyState == XMLHttpRequest.DONE) {
        pollResp = JSON.parse(xhttp.responseText);
        title.innerHTML = pollResp.title;
        description.innerHTML = pollResp.description || 'Usually a description goes here...';
        console.log('options1111: ' + pollResp.options);
        let optionItem;
        pollResp.options.forEach(p => {
          console.log('p: ' + p);
          let optionContainer = document.createElement("DIV");
          optionContainer.classList.add('optionContainer');
          optionItem = document.createElement("DIV");
          optionItem.classList.add('option');
          optionItem.textContent = p;
          optionContainer.appendChild(optionItem);

          let optionCounter = document.createElement("DIV");
          optionCounter.classList.add('counter');

          console.log('got some votes');
          console.log(pollResp.votes);
          console.log(pollResp.options);
          optionCounter.textContent = pollResp.votes[pollResp.options.indexOf(p)];

          optionContainer.appendChild(optionCounter);
          options.appendChild(optionContainer);
      })*/
      let votes = [];
      document.querySelectorAll('.counter').forEach (c => {
        c = c.textContent * 1;
        votes.push(c);
      })
      let highestVote = Math.max(...votes);
        document.querySelectorAll('.counter').forEach (c => {
          if (c.textContent * 1 == highestVote) {
            c.classList.add('highest');
          }
        })
}

options.addEventListener("click", event => {
  console.log('clicked');
  if (event.target.classList.contains('option')) {
      event.target.parentNode.parentNode.removeChild(event.target.parentNode);
  }
  if (event.target.classList.contains('counter' )) {
    let count = (event.target.innerHTML * 1) + 1;
    event.target.innerHTML = count.toString();
  }
  editPoll();
});

addOption.addEventListener("click", event => {
  console.log('click');
  let optionContainer = document.createElement("DIV");
  optionContainer.classList.add('optionContainer');

  let addOption1 = document.createElement("DIV");
  addOption1.classList.add('option');
  let optionCounter = document.createElement("DIV");
  optionCounter.classList.add('counter');
  optionCounter.innerHTML = "0";
  let input = document.getElementById('pollViewAdd');
  if (input.value.length > 0) {
  addOption1.textContent = input.value;
  input.value = "";
  optionContainer.appendChild(addOption1);
  optionContainer.appendChild(optionCounter);
  options.appendChild(optionContainer);
  editPoll();
} else {
  alert("You need to type something.");
}
})

function editPoll() {
  options = document.getElementById('pollViewOptions');
  let optionsToSend = options.querySelectorAll('.option');
  let optionsCounters = options.querySelectorAll('.counter');
  let optionsList = [];
  let countersList = [];
  for(let x = 0; x < optionsToSend.length; x++) {
  //  console.log('optinosToSend: ' + optionsToSend[x].textContent);
    optionsList.push(optionsToSend[x].textContent);
  }
  for (let y = 0; y < optionsCounters.length; y++) {
    countersList.push(optionsCounters[y].textContent);
  }
  console.log('counters: ' + countersList);
  console.log('options: ' + optionsList);

//  console.log('optionsNcounters: ' + optionsNcounters);
  xhttp.open("POST", "/editpoll", true);
  xhttp.setRequestHeader('Content-Type', 'application/json');
  console.log('optionslist: ' +  optionsList);
  console.log('counterslist: ' +  countersList);
  xhttp.send(JSON.stringify({'options': optionsList, 'votes': countersList}));
//  document.location.reload()
}
</script>
</html>
